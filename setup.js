
const fs = require('fs').promises;
const path = require('path');

async function createDirectories() {
    const dirs = ['./data', './output'];
    for (const dir of dirs) {
        await fs.mkdir(dir, { recursive: true });
        console.log(`Created directory: ${dir}`);
    }
}

async function createSampleDictionary() {
    const dictPath = './data/fr_mos_dict.tsv';
    
    const sampleDict = `fr_word	mos_word	pos	score
je	√†n…õ	PRON	0.95
tu	f…î…õÃÅ	PRON	0.95
il	√†	PRON	0.90
elle	√†	PRON	0.90
nous	t…©ÃÇ	PRON	0.95
vous	y…õÃÇ	PRON	0.95
ils	b√†	PRON	0.90
elles	b√†	PRON	0.90
aller	z…©ÃÄ	VERB	0.98
venir	k…î…õÃÇ	VERB	0.95
√™tre	y√£	VERB	0.98
avoir	t…©ÃÇ	VERB	0.95
faire	k·∫Ω	VERB	0.90
voir	ny…õ…õÃÄ	VERB	0.95
dire	t…õ…õÃÅ	VERB	0.92
savoir	s…îÃÉb	VERB	0.88
march√©	zaabƒÅ	NOUN	0.97
maison	yƒ©ÃÉ	NOUN	0.98
eau	k√µom	NOUN	0.99
pain	b…õ…õÃÄd	NOUN	0.95
riz	rƒ©is	NOUN	0.96
viande	nam	NOUN	0.94
au	n√†	PREP	0.85
du	n√†	PREP	0.80
de	n√†	PREP	0.82
le	la	DET	0.75
la	la	DET	0.75
les	la	DET	0.70
un	y…õ…õÃÄn	DET	0.80
une	y…õ…õÃÄn	DET	0.80
bonjour	n…õ b…õ…õÃÄd√£	INTJ	0.95
merci	b…õ…õlg k…©ÃÄtƒÅ	INTJ	0.98
au revoir	n…õ t…©ÃÇ s…îÃÅg·∫Ω	INTJ	0.92
comment	y…õ	ADV	0.90
o√π	bonƒÅ	ADV	0.95
quand	g√µn y√£	ADV	0.85
pourquoi	s…õbk√£	ADV	0.80
combien	y…õ…õÃÄb	ADV	0.88
aujourd'hui	t…©ÃÇ d√£ar	ADV	0.92
demain	k…©s√£	ADV	0.95
hier	t…©neer√£	ADV	0.90
beau	k…©ÃÉ	ADJ	0.85
grand	g√£nd	ADJ	0.88
petit	b…©…©ÃÄg	ADJ	0.90
bon	k…©ÃÉ	ADJ	0.87
mauvais	y√πub	ADJ	0.82
chaud	g≈©un√£	ADJ	0.93
froid	y√πupƒ©	ADJ	0.88`;

    await fs.writeFile(dictPath, sampleDict);
    console.log(`Created sample dictionary: ${dictPath}`);
}

async function createSampleCorpus() {
    const corpusPath = './data/fr_mos_corpus.jsonl';
    
    const sampleCorpus = [
        { "fr": "Je vais au march√©.", "mos": "N z…©ÃÄ n√† zaabƒÅ.", "source": "manual_v1", "sim": 1.0 },
        { "fr": "Bonjour, comment allez-vous?", "mos": "N…õ b…õ…õÃÄd√£, y…õ f…î y√£?", "source": "manual_v1", "sim": 1.0 },
        { "fr": "J'aime manger du riz.", "mos": "N z…îg rƒ©is dƒ©im.", "source": "manual_v1", "sim": 1.0 },
        { "fr": "Il fait chaud aujourd'hui.", "mos": "T…©ÃÇ d√£ar la g≈©un√£.", "source": "manual_v1", "sim": 1.0 },
        { "fr": "O√π est la maison?", "mos": "Yƒ©ÃÉ la bonƒÅ?", "source": "manual_v1", "sim": 1.0 },
        { "fr": "Elle est tr√®s belle.", "mos": "√Ä k…©ÃÉ s…©ÃÅnd√£.", "source": "manual_v1", "sim": 1.0 },
        { "fr": "Merci beaucoup.", "mos": "B…õ…õlg k…©ÃÄtƒÅ s…©ÃÅnd√£.", "source": "manual_v1", "sim": 1.0 },
        { "fr": "Au revoir!", "mos": "N…õ t…©ÃÇ s…îÃÅg·∫Ω!", "source": "manual_v1", "sim": 1.0 },
        { "fr": "Je ne comprends pas.", "mos": "N k√† s…îÃÉb.", "source": "manual_v1", "sim": 1.0 },
        { "fr": "Combien √ßa co√ªte?", "mos": "A t…©ÃÇ y…õ…õÃÄb?", "source": "manual_v1", "sim": 1.0 }
    ];

    const jsonlContent = sampleCorpus.map(entry => JSON.stringify(entry)).join('\n');
    await fs.writeFile(corpusPath, jsonlContent);
    console.log(`Created sample corpus: ${corpusPath}`);
}

async function createEnvFile() {
    const envContent = `# Afropair Pipeline Configuration
DICT_PATH=./data/fr_mos_dict.tsv
CORPUS_PATH=./data/fr_mos_corpus.jsonl
OUTPUT_PATH=./output/translations.jsonl
LOG_LEVEL=info`;

    await fs.writeFile('./.env', envContent);
    console.log('Created .env configuration file');
}

async function main() {
    console.log('üöÄ Setting up Afropair Pipeline...\n');
    
    try {
        await createDirectories();
        await createSampleDictionary();
        await createSampleCorpus();
        await createEnvFile();
        
        console.log('\n‚úÖ Setup complete!');
        console.log('\nNext steps:');
        console.log('1. npm install');
        console.log('2. npm start');
        console.log('\nOr run individual components:');
        console.log('- node afropair.js (run test harness)');
        console.log('- Check ./output/translations.jsonl for results');
        
    } catch (error) {
        console.error('‚ùå Setup failed:', error.message);
        process.exit(1);
    }
}

if (require.main === module) {
    main();
}

module.exports = { main };
